package mykotlin

/*SINGLETON : WHEN WE HAVE JUST ONE INSTANCE OF A CLASS IN THE WHOLE APPLICATION
* MEANING : IF CLASS STUDENT IS DECLARED SINGLETON THEN WE CANNOT CREATE OBJECTS FOR THIS CLASS
* THERE EXISTS ONLY ONE OBJECT FOR THIS CLASS BY DEFULT
* AND WE CANNOT CREATE OBJECTS LIKE STUDENT1,STUDENT2 ETC..
* IN JAVE , WE DEFINE SINGLETON , BY USING KEYWORD "STATIC" VARIABLES AND METHODS .
* BUT IN KOTLIN WE CANNOT DECLARE "STATIC" VARIABLES AND METHODS SO WE HAVE ALTERNATIVE TO THAT
* DECLARE "OBJECT" IN OTHER WORD IT ACT AS STATIC  [NON-STATIC : IF NEED TO GET THE VALUES FROM THAT CLASS NEED TO CREATE AN OBJECT BUT IN STATIC JUST USE THE KEYWORD OBJECT IN CLASS & GET THE VALUE BY USING CLASS NAME.VARIBLE NAME]
* THIS CREATS A SINGLETON OBJECT WHEN PROGRAM RUNS
* */

//CODE SNIPPET

/*object customer {
    var id: -1 //BEHAVING AS STATIC VARIABLE
    fun registerCustomer() { //BEHAVING AS STATIC METHOD

    }
}

customer.id=27 //CALLING WITHOUT CREATING INSTANCE
customer.registerCustomer()*/

//EXAMPLE OF CLASS WITHOUT OBJECT KEYWORD
/*fun main(args: Array<String>) {
    var b = CustomerCount()
    b.a=10
    println(b.a)
    println(b.DataCount())

}

class CustomerCount {
    var a: Int = -1
    fun DataCount(): String {
        return "MYTHRI"
    }
}*/


//EXAMPLE OF CLASS WITH OBJECT KEYWORD
/*fun main(args: Array<String>) {
    CustomerCount.a = 20
    println(CustomerCount.a)
    CustomerCount.a=100
    println(CustomerCount.a)
    println(CustomerCount.DataCount())
}

object CustomerCount {
    var a: Int = -1             //BEHAVING AS STATIC VARIABLE
    fun DataCount(): String {  //BEHAVING AS STATIC METHOD
        return "MYTHRI"
    }
}*/

/*OBJECT DECLARATION
* SINGLETON----ONE INSTANCE OF A CLASS IN WHOLE APPLICATION--MEANS SINGLETON CLASS CANNOT DECLARED AN OBJECT-->IT EXIST ONE OBJECT IN KOTLIN INTERNALLY--->IN JAVA WE DEFINE SINGLETON BY USING KEYWORD STATIC VARIABLE & METHOD
* IN KOTLIN WE CANNOT DECLARE STATIC KEYWORD BUT DECLARE OBJECT &OTHER DECLARATION
* USE OBJECT KEYWORD INSTEAD OF STATIC KEYWORD--DONOT CREATE OBJECT JUST USE CLASS NAME--DATA UPDATED--
* INSIDE OBJECT CLASS CONTAINI STATIC VARIABLE &ITS METHOD , FUNCTION, CANNOT HAVE CONSTRUCTOR--SUPPORT INHERITANCE*/


//OBJECT CAN ALSO INHERIT THE PROPERTY FROM SUPER CLASS
fun main(args: Array<String>) {
    CustomerCount.a = 20
    println(CustomerCount.a)
    CustomerCount.a = 100
    println(CustomerCount.a)
    println(CustomerCount.DataCount())
    CustomerCount.MyMethod("GOOD MORNING") //FORINHERIT CLASS ALSO NO NEED OF INSTANCE . DIRECT CAN ACEES COZ IT INHERIT WITH OBJECT CLASS
}

open class abc {
    open fun MyMethod(str: String) {
        println("My Super Class")
    }
}

object CustomerCount :
    abc() { //OBJECT CAN ALSO INHERIT THE PROPERTY FROM SUPER CLASS BUT MAKE SURE INHERIT CLASS SHOULD BE "OPEN"
    var a: Int = -1             //BEHAVING AS STATIC VARIABLE
    fun DataCount(): String {  //BEHAVING AS STATIC METHOD
        return "MYTHRI"
    }

    //IF WE ARE OVERIDE , OVERDIE FUNCTION SHOULD BE "OPEN"
    override fun MyMethod(str: String) {  //CURRENTLY BEHAVING LIKE A STATIC METHOD
        super.MyMethod(str)
        println("HELLO " + str)
    }

    init {
        //CAN ALSO USE INIT BLOCK INSIDE A OBJECT CLASS
    }
}


/*IMP NOTE:
* WHEN WE USE KEYWORD "OBJECT"
* KOTLIN INTERNALLY, CREATES A CLASS AND AN OBJECT/INSTANCE
* THOSE OBJECTS
* CAN HAVE PROPERTIES , METHODS AND INITILIZERS
* CANNOT HAVE CONSTRUCTORS [COZ AS WE CANNOT CREAT OBJECT/INSTANCE MANUALLY]
* "OBJECT" CAN ALSO HAVE SUPER CLASS [SUPPORT INHERITANCE] */